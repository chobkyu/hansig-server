generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model books {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(100)
  description String?
}

model user {
  id             Int             @id @default(autoincrement())
  userId         String?         @db.VarChar(50)
  userPw         String?         @db.VarChar(500)
  userName       String?         @db.VarChar(50)
  userNickName   String?         @db.VarChar(50)
  userGradeId    Int
  location_id    Int             @default(1)
  bank_id        Int             @default(1)       
  account_no     String?         @db.VarChar(100)
  point          Int?            @default(0)
  enrollHansics  enrollHansic[]
  favorites      favorites[]
  menus          menu[]
  owners         ownerData[]
  reviews        review[]
  reviewComments reviewComment[]
  location       location        @relation(fields: [location_id], references: [id])
  userGrade      userGrade       @relation(fields: [userGradeId], references: [id])
  bank           bank            @relation(fields: [bank_id], references: [id])
  userImgs       userImgs[]
}

model userImgs {
  id      Int     @id @default(autoincrement())
  imgUrl  String? @db.VarChar(500)
  useFlag Boolean @default(true)
  userId  Int
  user    user    @relation(fields: [userId], references: [id])
}

model userGrade {
  id          Int     @id @default(autoincrement())
  userGrade   String? @db.VarChar(10)
  description String? @db.VarChar(100)
  users       user[]
}

model ownerData {
  id         Int     @id @default(autoincrement())
  ownerNum   String? @db.VarChar(100)
  isApproved Boolean @default(false)
  hansicsId  Int     @unique
  userId     Int
  hansics    hansics @relation(fields: [hansicsId], references: [id])
  user       user    @relation(fields: [userId], references: [id])
}

model bank {
  id Int @id @default(autoincrement())
  bank_name String? @db.VarChar(100)
  sft_cd String? @db.VarChar(100)
  users user[]
}
model favorites {
  id        Int     @id @default(autoincrement())
  userId    Int
  hansicsId Int
  useFlag   Boolean @default(true)
  hansics   hansics @relation(fields: [hansicsId], references: [id])
  user      user    @relation(fields: [userId], references: [id])
}

model location {
  id            Int            @id @default(autoincrement())
  location      String?        @db.VarChar(50)
  enrollHansics enrollHansic[]
  hansics       hansics[]
  users         user[]
}

model hansics {
  id          Int          @id(map: "hansic_pkey") @default(autoincrement())
  name        String?      @db.VarChar(100)
  addr        String?      @db.VarChar(500)
  userStar    String?      @db.VarChar(50)
  google_star String?      @db.VarChar(100)
  location_id Int
  lat         Float?       @default(0)
  lng         Float?       @default(0)
  favorites   favorites[]
  location    location     @relation(fields: [location_id], references: [id])
  menus       menu[]
  owner       ownerData?
  reviews     review[]
  sicdangImgs sicdangImg[]
}

model sicdangImg {
  id        Int     @id @default(autoincrement())
  imgUrl    String? @db.VarChar(500)
  useFlag   Boolean @default(true)
  hansicsId Int
  hansics   hansics @relation(fields: [hansicsId], references: [id])
}

model menu {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(100)
  useFlag   Boolean   @default(false)
  userId    Int
  hansicsId Int
  price     Int
  hansics   hansics   @relation(fields: [hansicsId], references: [id])
  user      user      @relation(fields: [userId], references: [id])
  menuImgs  menuImg[]
}

model menuImg {
  id      Int     @id @default(autoincrement())
  imgUrl  String? @db.VarChar(500)
  useFlag Boolean @default(false)
  menuId  Int
  menu    menu    @relation(fields: [menuId], references: [id])
}

model review {
  id             Int             @id @default(autoincrement())
  review         String?         @db.VarChar(1000)
  star           Int
  useFlag        Boolean         @default(true)
  userId         Int
  hansicsId      Int
  hansics        hansics         @relation(fields: [hansicsId], references: [id])
  user           user            @relation(fields: [userId], references: [id])
  reviewComments reviewComment[]
  reviewImgs     reviewImg[]
}

model reviewImg {
  id       Int     @id @default(autoincrement())
  imgUrl   String? @db.VarChar(500)
  reviewId Int
  review   review  @relation(fields: [reviewId], references: [id])
}

model reviewComment {
  id       Int     @id @default(autoincrement())
  comment  String? @db.VarChar(500)
  reviewId Int
  useFlag  Boolean @default(true)
  userId   Int
  review   review  @relation(fields: [reviewId], references: [id])
  user     user    @relation(fields: [userId], references: [id])
}

model enrollHansic {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(100)
  addr        String?  @db.VarChar(500)
  location_id Int
  userId      Int
  isApproved  Boolean  @default(false)
  location    location @relation(fields: [location_id], references: [id])
  user        user     @relation(fields: [userId], references: [id])
}
