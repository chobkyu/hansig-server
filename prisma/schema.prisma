generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model books {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(100)
  description String?
}
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user {
  id Int @id @default(autoincrement())
  userId String? @db.VarChar(50)
  userPw String? @db.VarChar(500)
  userName String? @db.VarChar(50)
  userNickName String? @db.VarChar(50)
  userImgs userImgs[]
  reviews review[]
  menus menu[]
  userGrade userGrade @relation(fields:[userGradeId],references:[id])
  userGradeId Int
}

model userImgs {
  id Int @id @default(autoincrement())
  imgUrl String? @db.VarChar(500)
  useFlag Boolean @default(true)
  user user @relation(fields:[userId],references:[id])
  userId Int
  
}

model userGrade {
  id Int @id @default(autoincrement())
  userGrade String? @db.VarChar(10)
  description String? @db.VarChar(100)
  user user[]
}

model location {
  id Int @id @default(autoincrement())
  location String? @db.VarChar(50)
  hansics hansics[]
}

model hansics {
  id   Int     @id(map: "hansic_pkey") @default(autoincrement())
  name String? @db.VarChar(100)
  addr String? @db.VarChar(500)
  google_star String? @db.VarChar(100)
  userStar String? @db.VarChar(50)
  location location @relation(fields:[location_id],references:[id])
  location_id Int
  reviews review[]
  sicdangImgs sicdangImg[]
  menus menu[]
}

model sicdangImg {
  id Int @id @default(autoincrement())
  imgUrl String? @db.VarChar(500)
  useFlag Boolean @default(true)
  hansics hansics @relation(fields:[hansicsId],references:[id])
  hansicsId Int
}

model menu {
  id Int @id @default(autoincrement())
  name String? @db.VarChar(100)
  useFlag Boolean @default(false)
  price Int
  user user @relation(fields:[userId],references:[id])
  userId Int
  hansics hansics @relation(fields:[hansicsId],references:[id])
  hansicsId Int
  menuImgs menuImg[]
}

model menuImg {
  id Int @id @default(autoincrement())
  imgUrl String? @db.VarChar(500)
  useFlag Boolean @default(false)
  menu menu @relation(fields:[menuId],references:[id])
  menuId Int
}

model review {
  id Int @id @default(autoincrement())
  review String? @db.VarChar(1000)
  star Int
  useFlag Boolean @default(true)
  user user @relation(fields:[userId],references:[id])
  userId Int
  hansics hansics @relation(fields:[hansicsId],references:[id])
  hansicsId Int
  reviewImgs reviewImg[]
  reviewComments reviewComment[]
}

model reviewImg {
  id Int @id @default(autoincrement())
  imgUrl String? @db.VarChar(500)
  review review @relation(fields:[reviewId],references:[id])
  reviewId Int
}

model reviewComment {
  id Int @id @default(autoincrement())
  comment String? @db.VarChar(500)
  review review @relation(fields:[reviewId],references:[id])
  reviewId Int
 String? @db.VarChar(500)
  review review @relation(fields:[reviewId],references:[id])
  reviewId Int
}
